{"version":3,"file":"stopwatch.js","sourceRoot":"","sources":["../../src/runtime/stopwatch.ts"],"names":[],"mappings":";;;;;;AAAA,iDAAwE;AACxE,mDAA6B;AAa7B,MAAM,aAAa;IAGjB,YAAoB,OAAiB,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;QAAzC,SAAI,GAAJ,IAAI,CAAqC;IAAG,CAAC;IAEjE,KAAK;QACH,IAAI,CAAC,OAAO,GAAG,cAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAA;QACxC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,IAAI;QACF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;QAC3B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAA;QACxB,OAAO,IAAI,CAAA;IACb,CAAC;IAED,QAAQ;QACN,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;YACpC,OAAO,IAAI,CAAC,IAAI,CAAA;SACjB;QACD,OAAO,yBAAc,CAAC,YAAY,CAChC,IAAI,CAAC,IAAI,EACT,yBAAc,CAAC,sBAAsB,CACnC,cAAO,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CACzC,CACF,CAAA;IACH,CAAC;IAED,SAAS;QACP,OAAO,yBAAc,CAAC,iCAAiC,CAAC,cAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IAC7E,CAAC;CACF;AAEM,MAAM,MAAM,GAAG,CAAC,IAAe,EAAc,EAAE,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAA;AAAjE,QAAA,MAAM,UAA2D","sourcesContent":["import { Duration, TimeConversion, Timestamp } from '@cucumber/messages'\nimport methods from '../time'\n\n/**\n * A utility for timing test run operations and returning duration and\n * timestamp objects in messages-compatible formats\n */\nexport interface IStopwatch {\n  start: () => IStopwatch\n  stop: () => IStopwatch\n  duration: () => Duration\n  timestamp: () => Timestamp\n}\n\nclass StopwatchImpl implements IStopwatch {\n  private started: number\n\n  constructor(private base: Duration = { seconds: 0, nanos: 0 }) {}\n\n  start(): IStopwatch {\n    this.started = methods.performance.now()\n    return this\n  }\n\n  stop(): IStopwatch {\n    this.base = this.duration()\n    this.started = undefined\n    return this\n  }\n\n  duration(): Duration {\n    if (typeof this.started !== 'number') {\n      return this.base\n    }\n    return TimeConversion.addDurations(\n      this.base,\n      TimeConversion.millisecondsToDuration(\n        methods.performance.now() - this.started\n      )\n    )\n  }\n\n  timestamp(): Timestamp {\n    return TimeConversion.millisecondsSinceEpochToTimestamp(methods.Date.now())\n  }\n}\n\nexport const create = (base?: Duration): IStopwatch => new StopwatchImpl(base)\n"]}