{"version":3,"file":"junit_formatter.js","sourceRoot":"","sources":["../../src/formatter/junit_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import xmlbuilder from 'xmlbuilder'\nimport Formatter, { IFormatterOptions } from './'\nimport * as messages from '@cucumber/messages'\nimport {\n  Attachment,\n  Duration,\n  Feature,\n  getWorstTestStepResult,\n  Pickle,\n  Rule,\n  TestStepResult,\n  TestStepResultStatus,\n} from '@cucumber/messages'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { doesHaveValue } from '../value_checker'\nimport {\n  getGherkinExampleRuleMap,\n  getGherkinStepMap,\n} from './helpers/gherkin_document_parser'\nimport { getPickleStepMap, getStepKeyword } from './helpers/pickle_parser'\nimport { valueOrDefault } from '../value_checker'\n\ninterface IJUnitTestSuite {\n  name: string\n  failures: number\n  skipped: number\n  time: number\n  tests: IJUnitTestCase[]\n}\n\ninterface IJUnitTestCase {\n  classname: string\n  name: string\n  time: number\n  result: IJUnitTestCaseResult\n  systemOutput: string\n  steps: IJUnitTestStep[]\n}\n\ninterface IJUnitTestCaseFailure {\n  type: string\n  message?: string\n  detail: string\n}\n\ninterface IJUnitTestCaseResult {\n  status: TestStepResultStatus\n  failure?: IJUnitTestCaseFailure\n}\n\ninterface IJUnitTestStep {\n  attachments: Attachment[]\n  hidden: boolean\n  keyword: string\n  line: number\n  name?: string\n  result: TestStepResult\n  time: number\n}\n\ninterface IBuildJUnitTestStepOptions {\n  isBeforeHook: boolean\n  gherkinStepMap: Record<string, messages.Step>\n  pickleStepMap: Record<string, messages.PickleStep>\n  testStep: messages.TestStep\n  testStepAttachments: messages.Attachment[]\n  testStepResult: messages.TestStepResult\n}\n\nexport default class JunitFormatter extends Formatter {\n  private readonly names: Record<string, string[]> = {}\n  private readonly suiteName: string\n  public static readonly documentation: string = 'Outputs JUnit report'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    this.suiteName = valueOrDefault(\n      options.parsedArgvOptions.junit?.suiteName,\n      'cucumber-js'\n    )\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.onTestRunFinished()\n      }\n    })\n  }\n\n  private getTestCases() {\n    return this.eventDataCollector\n      .getTestCaseAttempts()\n      .filter((attempt) => !attempt.willBeRetried)\n  }\n\n  private getTestSteps(\n    testCaseAttempt: ITestCaseAttempt,\n    gherkinStepMap: Record<string, messages.Step>,\n    pickleStepMap: Record<string, messages.PickleStep>\n  ) {\n    return testCaseAttempt.testCase.testSteps.map((testStep) => {\n      const isBeforeHook = !doesHaveValue(testStep.pickleStepId)\n      return this.getTestStep({\n        isBeforeHook,\n        gherkinStepMap,\n        pickleStepMap,\n        testStep,\n        testStepAttachments: testCaseAttempt.stepAttachments[testStep.id],\n        testStepResult: testCaseAttempt.stepResults[testStep.id],\n      })\n    })\n  }\n\n  private getTestStep({\n    isBeforeHook,\n    gherkinStepMap,\n    pickleStepMap,\n    testStep,\n    testStepAttachments,\n    testStepResult,\n  }: IBuildJUnitTestStepOptions): IJUnitTestStep {\n    const data: Partial<IJUnitTestStep> = {}\n    if (testStep.pickleStepId) {\n      const pickleStep = pickleStepMap[testStep.pickleStepId]\n      data.keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      data.line = gherkinStepMap[pickleStep.astNodeIds[0]].location.line\n      data.name = pickleStep.text\n    } else {\n      data.keyword = isBeforeHook ? 'Before' : 'After'\n      data.hidden = true\n    }\n    data.result = testStepResult\n    data.time = testStepResult.duration\n      ? this.durationToSeconds(testStepResult.duration)\n      : 0\n    data.attachments = testStepAttachments\n    return data as IJUnitTestStep\n  }\n\n  private getTestCaseResult(steps: IJUnitTestStep[]): IJUnitTestCaseResult {\n    const { status, message, exception } = getWorstTestStepResult(\n      steps.map((step) => step.result)\n    )\n    return {\n      status,\n      failure:\n        message || exception\n          ? {\n              type: exception?.type,\n              message: exception?.message,\n              detail: message,\n            }\n          : undefined,\n    }\n  }\n\n  private durationToSeconds(duration: Duration): number {\n    const NANOS_IN_SECOND = 1_000_000_000\n    return (\n      (duration.seconds * NANOS_IN_SECOND + duration.nanos) / NANOS_IN_SECOND\n    )\n  }\n\n  private nameOrDefault(name: string, fallbackSuffix: string): string {\n    if (!name) {\n      return `(unnamed ${fallbackSuffix})`\n    }\n    return name\n  }\n\n  private getTestCaseName(\n    feature: Feature,\n    rule: Rule | undefined,\n    pickle: Pickle\n  ) {\n    const featureName = this.nameOrDefault(feature.name, 'feature')\n    const pickleName = this.nameOrDefault(pickle.name, 'scenario')\n    const testCaseName = rule\n      ? this.nameOrDefault(rule.name, 'rule') + ': ' + pickleName\n      : pickleName\n    if (!this.names[featureName]) {\n      this.names[featureName] = []\n    }\n    let index = 0\n    while (\n      this.names[featureName].includes(\n        index > 0 ? `${testCaseName} [${index}]` : testCaseName\n      )\n    ) {\n      index++\n    }\n    const name = index > 0 ? `${testCaseName} [${index}]` : testCaseName\n    this.names[featureName].push(name)\n    return name\n  }\n\n  private formatTestSteps(steps: IJUnitTestStep[]): string {\n    return steps\n      .filter((step) => !step.hidden)\n      .map((step) => {\n        const statusText = step.result.status.toLowerCase()\n        const maxLength = 80 - statusText.length - 3\n        const stepText = `${step.keyword}${step.name}`\n          .padEnd(maxLength, '.')\n          .substring(0, maxLength)\n        return `${stepText}...${statusText}`\n      })\n      .join('\\n')\n  }\n\n  private onTestRunFinished(): void {\n    const testCases = this.getTestCases()\n\n    const tests = testCases.map<IJUnitTestCase>(\n      (testCaseAttempt: ITestCaseAttempt) => {\n        const { gherkinDocument, pickle } = testCaseAttempt\n        const { feature } = gherkinDocument\n        const gherkinExampleRuleMap = getGherkinExampleRuleMap(gherkinDocument)\n        const rule = gherkinExampleRuleMap[pickle.astNodeIds[0]]\n        const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n        const pickleStepMap = getPickleStepMap(pickle)\n\n        const steps = this.getTestSteps(\n          testCaseAttempt,\n          gherkinStepMap,\n          pickleStepMap\n        )\n        const stepDuration = steps.reduce(\n          (total, step) => total + (step.time || 0),\n          0\n        )\n\n        return {\n          classname: this.nameOrDefault(feature.name, 'feature'),\n          name: this.getTestCaseName(feature, rule, pickle),\n          time: stepDuration,\n          result: this.getTestCaseResult(steps),\n          systemOutput: this.formatTestSteps(steps),\n          steps,\n        }\n      }\n    )\n\n    const passed = tests.filter(\n      (item) => item.result.status === TestStepResultStatus.PASSED\n    ).length\n    const skipped = tests.filter(\n      (item) => item.result.status === TestStepResultStatus.SKIPPED\n    ).length\n    const failures = tests.length - passed - skipped\n\n    const testSuite: IJUnitTestSuite = {\n      name: this.suiteName,\n      tests,\n      failures,\n      skipped,\n      time: tests.reduce((total, test) => total + test.time, 0),\n    }\n\n    this.log(this.buildXmlReport(testSuite))\n  }\n\n  private buildXmlReport(testSuite: IJUnitTestSuite): string {\n    const xmlReport = xmlbuilder\n      .create('testsuite', { invalidCharReplacement: '' })\n      .att('failures', testSuite.failures)\n      .att('skipped', testSuite.skipped)\n      .att('name', testSuite.name)\n      .att('time', testSuite.time)\n      .att('tests', testSuite.tests.length)\n    testSuite.tests.forEach((test) => {\n      const xmlTestCase = xmlReport.ele('testcase', {\n        classname: test.classname,\n        name: test.name,\n        time: test.time,\n      })\n      if (test.result.status === TestStepResultStatus.SKIPPED) {\n        xmlTestCase.ele('skipped')\n      } else if (test.result.status !== TestStepResultStatus.PASSED) {\n        const xmlFailure = xmlTestCase.ele('failure', {\n          type: test.result.failure?.type,\n          message: test.result.failure?.message,\n        })\n        if (test.result?.failure) {\n          xmlFailure.cdata(test.result.failure.detail)\n        }\n      }\n      xmlTestCase.ele('system-out', {}).cdata(test.systemOutput)\n    })\n\n    return xmlReport.end({ pretty: true })\n  }\n}\n"]}