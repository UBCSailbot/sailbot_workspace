{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/cli/index.ts"],"names":[],"mappings":";;;;;AAAA,oDAA6C;AAE7C,gCAAuD;AACvD,iCAAkD;AAClD,2DAAqD;AACrD,kDAAyB;AAOzB,MAAqB,GAAG;IAOtB,YAAY,EACV,IAAI,EACJ,GAAG,EACH,MAAM,EACN,MAAM,GAAG,OAAO,CAAC,MAAM,EACvB,GAAG,GAOJ;QACC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,GAAG;QACP,MAAM,YAAY,GAAG,eAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;QAC9C,IAAI,YAAY,EAAE;YAChB,MAAM,IAAA,mCAAe,GAAE,CAAA;SACxB;QACD,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,GAAG,0BAAU,CAAC,KAAK,CACpE,IAAI,CAAC,IAAI,CACV,CAAA;QACD,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAA,mBAAY,GAAE,CAAC,CAAA;YACjC,OAAO;gBACL,qBAAqB,EAAE,IAAI;gBAC3B,OAAO,EAAE,IAAI;aACd,CAAA;SACF;QACD,IAAI,OAAO,CAAC,YAAY,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAA,kBAAW,EAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAA;YACpD,OAAO;gBACL,qBAAqB,EAAE,IAAI;gBAC3B,OAAO,EAAE,IAAI;aACd,CAAA;SACF;QAED,MAAM,WAAW,GAAG;YAClB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,KAAK,EAAE,YAAY;SACpB,CAAA;QACD,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE,gBAAgB,EAAE,GACzD,MAAM,IAAA,uBAAiB,EACrB;YACE,IAAI,EAAE,OAAO,CAAC,MAAM;YACpB,QAAQ,EAAE,OAAO,CAAC,OAAO;YACzB,QAAQ,EAAE,iBAAiB;SAC5B,EACD,WAAW,CACZ,CAAA;QACH,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,iBAAW,EAAC,gBAAgB,EAAE,WAAW,CAAC,CAAA;QACpE,OAAO;YACL,qBAAqB,EAAE,aAAa,CAAC,SAAS;YAC9C,OAAO;SACR,CAAA;IACH,CAAC;CACF;AAxED,sBAwEC","sourcesContent":["import { ArgvParser } from '../configuration'\nimport { IFormatterStream } from '../formatter'\nimport { loadConfiguration, runCucumber } from '../api'\nimport { getKeywords, getLanguages } from './i18n'\nimport { validateInstall } from './install_validator'\nimport debug from 'debug'\n\nexport interface ICliRunResult {\n  shouldExitImmediately: boolean\n  success: boolean\n}\n\nexport default class Cli {\n  private readonly argv: string[]\n  private readonly cwd: string\n  private readonly stdout: IFormatterStream\n  private readonly stderr: IFormatterStream\n  private readonly env: NodeJS.ProcessEnv\n\n  constructor({\n    argv,\n    cwd,\n    stdout,\n    stderr = process.stderr,\n    env,\n  }: {\n    argv: string[]\n    cwd: string\n    stdout: IFormatterStream\n    stderr?: IFormatterStream\n    env: NodeJS.ProcessEnv\n  }) {\n    this.argv = argv\n    this.cwd = cwd\n    this.stdout = stdout\n    this.stderr = stderr\n    this.env = env\n  }\n\n  async run(): Promise<ICliRunResult> {\n    const debugEnabled = debug.enabled('cucumber')\n    if (debugEnabled) {\n      await validateInstall()\n    }\n    const { options, configuration: argvConfiguration } = ArgvParser.parse(\n      this.argv\n    )\n    if (options.i18nLanguages) {\n      this.stdout.write(getLanguages())\n      return {\n        shouldExitImmediately: true,\n        success: true,\n      }\n    }\n    if (options.i18nKeywords) {\n      this.stdout.write(getKeywords(options.i18nKeywords))\n      return {\n        shouldExitImmediately: true,\n        success: true,\n      }\n    }\n\n    const environment = {\n      cwd: this.cwd,\n      stdout: this.stdout,\n      stderr: this.stderr,\n      env: this.env,\n      debug: debugEnabled,\n    }\n    const { useConfiguration: configuration, runConfiguration } =\n      await loadConfiguration(\n        {\n          file: options.config,\n          profiles: options.profile,\n          provided: argvConfiguration,\n        },\n        environment\n      )\n    const { success } = await runCucumber(runConfiguration, environment)\n    return {\n      shouldExitImmediately: configuration.forceExit,\n      success,\n    }\n  }\n}\n"]}