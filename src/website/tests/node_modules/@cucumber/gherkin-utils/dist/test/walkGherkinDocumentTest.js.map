{"version":3,"file":"walkGherkinDocumentTest.js","sourceRoot":"","sources":["../../test/walkGherkinDocumentTest.ts"],"names":[],"mappings":";;;;;AAAA,oDAA2B;AAC3B,oDAA2B;AAC3B,gCAAqE;AAErE,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,eAAe,GAAG,IAAA,eAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BjC,CAAC,CAAA;QAEE,MAAM,QAAQ,GAAsC;YAClD,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG;YAC9B,SAAS,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG;YAClC,SAAS,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YAC5D,SAAS,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;YAC1D,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG;YAChC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpD,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YACnD,UAAU,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAC5D,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1C,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtD,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtD,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;SAC3C,CAAA;QAED,MAAM,KAAK,GAAG,IAAA,yBAAmB,EAAW,eAAe,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;QAC1E,gBAAM,CAAC,SAAS,CAAC,KAAK,EAAE,+CAA+C,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;IACrF,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import assert from 'assert'\nimport parse from './parse'\nimport { GherkinDocumentHandlers, walkGherkinDocument } from '../src'\n\ndescribe('walkGherkinDocument', () => {\n  it('traverses depth first', () => {\n    const gherkinDocument = parse(`\n      @A\n      Feature: B\n        Background: C\n\n        @D\n        Scenario: E\n          Given F\n\n        Scenario: G\n          Given H\n\n        Rule: I\n          @J\n          Scenario: K\n            Given L\n              | M | N |\n              | O | P |\n\n            Examples: Q\n\n          Scenario: R\n            Given S\n              \"\"\"\n              T\n              \"\"\"\n\n            Examples: U\n              | V |\n              | W |\n`)\n\n    const handlers: GherkinDocumentHandlers<string[]> = {\n      comment: (comment, acc) => acc,\n      dataTable: (dataTable, acc) => acc,\n      docString: (docString, acc) => acc.concat(docString.content),\n      tableCell: (tableCell, acc) => acc.concat(tableCell.value),\n      tableRow: (tableRow, acc) => acc,\n      tag: (tag, acc) => acc.concat(tag.name.substring(1)),\n      feature: (feature, acc) => acc.concat(feature.name),\n      background: (background, acc) => acc.concat(background.name),\n      rule: (rule, acc) => acc.concat(rule.name),\n      scenario: (scenario, acc) => acc.concat(scenario.name),\n      examples: (examples, acc) => acc.concat(examples.name),\n      step: (step, acc) => acc.concat(step.text),\n    }\n\n    const names = walkGherkinDocument<string[]>(gherkinDocument, [], handlers)\n    assert.deepEqual(names, 'A B C D E F G H I J K L M N O P Q R S T U V W'.split(' '))\n  })\n})\n"]}