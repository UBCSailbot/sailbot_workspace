{"version":3,"file":"messageTest.js","sourceRoot":"","sources":["../../test/messageTest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oDAA2B;AAE3B,+DAAiE;AACjE,mCAA2C;AAE3C,gCAA8C;AAC9C,4CAAmB;AACnB,0DAA0B;AAC1B,+BAAgC;AAEhC,MAAM,aAAa,GAAG,IAAA,gBAAS,EAAC,iBAAQ,CAAC,CAAA;AAEzC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,MAAM,iBAAiB,GAAG,mBAAE,CAAC,IAAI,CAAC,GAAG,SAAS,uBAAuB,CAAC,CAAA;IACtE,MAAM,eAAe,GAAG,mBAAE,CAAC,IAAI,CAC7B,GAAG,SAAS,mEAAmE,CAChF,CAAA;IACD,MAAM,YAAY,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAA;IAElE,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,gBAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IACzC,CAAC,CAAC,CAAA;IAEF,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;QACtC,EAAE,CAAC,wCAAwC,WAAW,EAAE,EAAE,GAAS,EAAE;YACnE,MAAM,aAAa,GAAG,IAAI,uCAAqB,EAAE,CAAA;YAEjD,MAAM,aAAa,CACjB,YAAE,CAAC,gBAAgB,CAAC,WAAW,EAAE,OAAO,CAAC,EACzC,aAAa,EACb,IAAI,iBAAQ,CAAC;gBACX,UAAU,EAAE,IAAI;gBAChB,KAAK,CACH,QAA2B,EAC3B,SAAiB,EACjB,QAAwC;oBAExC,IAAI;wBACF,IAAI,QAAQ,CAAC,eAAe,EAAE;4BAC5B,MAAM,MAAM,GAAG,IAAI,2BAAqB,EAAE,CAAA;4BAC1C,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;yBACrD;wBACD,QAAQ,EAAE,CAAA;qBACX;oBAAC,OAAO,KAAK,EAAE;wBACd,KAAK,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,eAAe,CAAC,GAAG,IAAI,CAAA;wBACtD,QAAQ,CAAC,KAAK,CAAC,CAAA;qBAChB;gBACH,CAAC;aACF,CAAC,CACH,CAAA;QACH,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;KAClB;AACH,CAAC,CAAC,CAAA","sourcesContent":["import assert from 'assert'\nimport * as messages from '@cucumber/messages'\nimport { NdjsonToMessageStream } from '@cucumber/message-streams'\nimport { Writable, pipeline } from 'stream'\n\nimport { GherkinDocumentWalker } from '../src'\nimport fs from 'fs'\nimport fg from 'fast-glob'\nimport { promisify } from 'util'\n\nconst asyncPipeline = promisify(pipeline)\n\ndescribe('Walking with messages', () => {\n  const localMessageFiles = fg.sync(`${__dirname}/messages/**/*.ndjson`)\n  const tckMessageFiles = fg.sync(\n    `${__dirname}/../node_modules/@cucumber/compatibility-kit/features/**/*.ndjson`\n  )\n  const messageFiles = [].concat(localMessageFiles, tckMessageFiles)\n\n  it('must have some messages for comparison', () => {\n    assert.notEqual(messageFiles.length, 0)\n  })\n\n  for (const messageFile of messageFiles) {\n    it(`can walk through GherkinDocuments in ${messageFile}`, async () => {\n      const messageStream = new NdjsonToMessageStream()\n\n      await asyncPipeline(\n        fs.createReadStream(messageFile, 'utf-8'),\n        messageStream,\n        new Writable({\n          objectMode: true,\n          write(\n            envelope: messages.Envelope,\n            _encoding: string,\n            callback: (error?: Error | null) => void\n          ) {\n            try {\n              if (envelope.gherkinDocument) {\n                const walker = new GherkinDocumentWalker()\n                walker.walkGherkinDocument(envelope.gherkinDocument)\n              }\n              callback()\n            } catch (error) {\n              error.message += `\\n${envelope.gherkinDocument.uri}\\n`\n              callback(error)\n            }\n          },\n        })\n      )\n    }).timeout(30000)\n  }\n})\n"]}