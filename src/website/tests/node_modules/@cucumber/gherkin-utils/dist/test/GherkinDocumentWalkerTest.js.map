{"version":3,"file":"GherkinDocumentWalkerTest.js","sourceRoot":"","sources":["../../test/GherkinDocumentWalkerTest.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert'\nimport GherkinDocumentWalker, { rejectAllFilters } from '../src/GherkinDocumentWalker'\nimport pretty from '../src/pretty'\nimport parse from './parse'\n\ndescribe('GherkinDocumentWalker', () => {\n  let walker: GherkinDocumentWalker\n\n  beforeEach(() => {\n    walker = new GherkinDocumentWalker()\n  })\n\n  function assertCopy(copy: any, source: any) {\n    assert.deepEqual(copy, source)\n    assert.notEqual(copy, source)\n  }\n\n  it('returns a deep copy', () => {\n    const gherkinDocument = parse(`@featureTag\nFeature: hello\n  This feature has a description\n\n  Background: Base Background\n    This is a described background\n    Given a passed step\n\n  @scenarioTag\n  Scenario: salut\n    Yes, there is a description here too\n\n  @ruleTag\n  Rule: roule\n    Can we describe a Rule ?\n\n    Background: poupidou\n    Scenario: pouet\n`)\n    const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n\n    assertCopy(newGherkinDocument, gherkinDocument)\n    assertCopy(newGherkinDocument.feature, gherkinDocument.feature)\n    assertCopy(\n      newGherkinDocument.feature.children[0].background,\n      gherkinDocument.feature.children[0].background\n    )\n    assertCopy(\n      newGherkinDocument.feature.children[1].scenario,\n      gherkinDocument.feature.children[1].scenario\n    )\n    assertCopy(\n      newGherkinDocument.feature.children[2].rule,\n      gherkinDocument.feature.children[2].rule\n    )\n    assertCopy(\n      newGherkinDocument.feature.children[2].rule.children[1],\n      gherkinDocument.feature.children[2].rule.children[1]\n    )\n    assertCopy(\n      newGherkinDocument.feature.children[0].background.steps,\n      gherkinDocument.feature.children[0].background.steps\n    )\n  })\n\n  context('filtering objects', () => {\n    it('filters one scenario', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptScenario: (scenario) => scenario.name === 'Earth' },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('keeps scenario with search hit in step', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptStep: (step) => step.text.includes('liquid') },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('does not leave null object as a feature child', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptScenario: (scenario) => scenario.name === 'Earth' },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      assert.deepStrictEqual(\n        newGherkinDocument.feature.children.filter((child) => child === null),\n        []\n      )\n    })\n\n    it('keeps a hit scenario even when no steps match', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptScenario: (scenario) => scenario.name === 'Saturn' },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    // TODO before merging https://github.com/cucumber/cucumber/pull/1419\n    xit('keeps a hit background', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n    Background: TON 618\n      Given it exists\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{\n          acceptBackground: (background) => background.name === 'Milky Way',\n        },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n\n    Background: Milky Way\n      Given it contains our system\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('keeps a hit in background step', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n    Background: TON 618\n      Given it exists\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptStep: (step) => step.text.includes('space') },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Background: Space\n    Given space is real\n\n  Rule: Galaxy\n\n    Background: Milky Way\n      Given it contains our system\n\n  Rule: Black Hole\n\n    Background: TON 618\n      Given it exists\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    // TODO before merging https://github.com/cucumber/cucumber/pull/1419\n    xit('keeps scenario in rule', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptScenario: (scenario) => scenario.name === 'Andromeda' },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Andromeda\n      Given it exists\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('keeps scenario and background in rule', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptRule: (rule) => rule.name === 'Galaxy' },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Rule: Galaxy\n\n    Background: TON 618\n      Given it's a black hole\n\n    Scenario: Milky Way\n      Given it contains our system\n\n    Scenario: Andromeda\n      Given it exists\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('only keeps rule and its content', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Milky Way\n    Given it contains our system\n\n  Rule: Galaxy\n\n    Scenario: Andromeda\n      Given it exists\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        ...{ acceptRule: () => true },\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Rule: Galaxy\n\n    Scenario: Andromeda\n      Given it exists\n`\n      assert.strictEqual(newSource, expectedNewSource)\n    })\n\n    it('return a feature and keep scenario', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker({\n        ...rejectAllFilters,\n        acceptFeature: (feature) => feature.name === 'Solar System',\n      })\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      const newSource = pretty(newGherkinDocument, 'gherkin')\n      const expectedNewSource = `Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`\n      assert.deepStrictEqual(newSource, expectedNewSource)\n    })\n\n    it('returns null when no hit found', () => {\n      const gherkinDocument = parse(`Feature: Solar System\n\n  Scenario: Saturn\n    Given is the sixth planet from the Sun\n\n  Scenario: Earth\n    Given is a planet with liquid water\n`)\n\n      const walker = new GherkinDocumentWalker(rejectAllFilters)\n      const newGherkinDocument = walker.walkGherkinDocument(gherkinDocument)\n      assert.deepEqual(newGherkinDocument, null)\n    })\n  })\n\n  context('handling objects', () => {\n    describe('handleStep', () => {\n      it('is called for each steps', () => {\n        const gherkinDocument = parse(`Feature: Solar System\n\n        Scenario: Earth\n          Given it is a planet\n`)\n\n        const stepText: string[] = []\n        const astWalker = new GherkinDocumentWalker(\n          {},\n          {\n            handleStep: (step) => stepText.push(step.text),\n          }\n        )\n        astWalker.walkGherkinDocument(gherkinDocument)\n\n        assert.deepEqual(stepText, ['it is a planet'])\n      })\n    })\n\n    describe('handleScenario', () => {\n      it('is called for each scenarios', () => {\n        const gherkinDocument = parse(`Feature: Solar System\n\n        Scenario: Earth\n          Given it is a planet\n\n        Scenario: Saturn\n          Given it's not a liquid planet\n`)\n\n        const scenarioName: string[] = []\n        const astWalker = new GherkinDocumentWalker(\n          {},\n          {\n            handleScenario: (scenario) => scenarioName.push(scenario.name),\n          }\n        )\n        astWalker.walkGherkinDocument(gherkinDocument)\n\n        assert.deepEqual(scenarioName, ['Earth', 'Saturn'])\n      })\n    })\n\n    describe('handleBackground', () => {\n      it('is called for each backgrounds', () => {\n        const gherkinDocument = parse(`Feature: Solar System\n\n        Background: Milky Way\n          Scenario: Earth\n            Given it is our galaxy\n`)\n\n        const backgroundName: string[] = []\n        const astWalker = new GherkinDocumentWalker(\n          {},\n          {\n            handleBackground: (background) => backgroundName.push(background.name),\n          }\n        )\n        astWalker.walkGherkinDocument(gherkinDocument)\n\n        assert.deepEqual(backgroundName, ['Milky Way'])\n      })\n    })\n\n    describe('handleRule', () => {\n      it('is called for each rules', () => {\n        const gherkinDocument = parse(`Feature: Solar System\n\n        Rule: On a planet\n          Scenario: There is life\n            Given there is water\n\n        Rule: On an exoplanet\n          Scenario: There is extraterrestrial life\n            Given there is a non-humanoid form of life\n`)\n\n        const ruleName: string[] = []\n        const astWalker = new GherkinDocumentWalker(\n          {},\n          {\n            handleRule: (rule) => ruleName.push(rule.name),\n          }\n        )\n        astWalker.walkGherkinDocument(gherkinDocument)\n\n        assert.deepEqual(ruleName, ['On a planet', 'On an exoplanet'])\n      })\n    })\n\n    describe('handleFeature', () => {\n      it('is called for each features', () => {\n        const gherkinDocument = parse(`Feature: Solar System\n\n        Rule: On a planet\n          Scenario: There is life\n            Given there is water\n\n        Rule: On an exoplanet\n          Scenario: There is extraterrestrial life\n            Given there is a non-humanoid form of life\n`)\n\n        const featureName: string[] = []\n        const astWalker = new GherkinDocumentWalker(\n          {},\n          {\n            handleFeature: (feature) => featureName.push(feature.name),\n          }\n        )\n        astWalker.walkGherkinDocument(gherkinDocument)\n\n        assert.deepEqual(featureName, ['Solar System'])\n      })\n    })\n  })\n\n  describe('regression tests', () => {\n    it('does not fail with empty/commented documents', () => {\n      const gherkinDocument = parse('# Feature: Solar System')\n      const astWalker = new GherkinDocumentWalker()\n\n      astWalker.walkGherkinDocument(gherkinDocument)\n    })\n  })\n})\n"]}