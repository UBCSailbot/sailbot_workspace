{"version":3,"file":"prettyTest.js","sourceRoot":"","sources":["../../test/prettyTest.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert'\nimport path from 'path'\nimport parse from './parse'\nimport pretty, { escapeCell } from '../src/pretty'\nimport { GherkinClassicTokenMatcher, GherkinInMarkdownTokenMatcher } from '@cucumber/gherkin'\nimport fg from 'fast-glob'\nimport fs from 'fs'\nimport * as messages from '@cucumber/messages'\n\ndescribe('pretty', () => {\n  it('renders an empty file', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin('')\n  })\n\n  it('renders the language header if it is not \"en\"', () => {\n    checkGherkinToAstToGherkin(`# language: no\nEgenskap: hallo\n`)\n  })\n\n  it('renders a feature with empty scenarios', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n\n  Scenario: Two\n`)\n  })\n\n  it('renders a feature with two scenarios', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n    Given hello\n\n  Scenario: two\n    Given world\n`)\n  })\n\n  it('renders a feature with two scenarios in a rule', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Rule: ok\n\n    Scenario: one\n      Given hello\n\n    Scenario: two\n      Given world\n`)\n  })\n\n  it('renders a feature with background and scenario', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Background: bbb\n    Given hello\n\n  Scenario: two\n    Given world\n`)\n  })\n\n  it('renders a rule with background and scenario', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Rule: machin\n\n    Background: bbb\n      Given hello\n\n    Scenario: two\n      Given world\n`)\n  })\n\n  it('renders tags when set', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`@featureTag\nFeature: hello\n\n  Rule: machin\n\n    Background: bbb\n      Given hello\n\n    @scenarioTag @secondTag\n    Scenario: two\n      Given world\n`)\n  })\n\n  it('renders examples tables', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n    Given a a <text> and a <number>\n\n    Examples: some data\n      | text | number |\n      | a    |      1 |\n      | ab   |     10 |\n      | abc  |    100 |\n`)\n  })\n\n  it('renders data tables', () => {\n    checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n    Given a data table:\n      | text | numbers |\n      | a    |       1 |\n      | ab   |      10 |\n      | abc  |     100 |\n`)\n  })\n\n  describe('DocString', () => {\n    it('is rendered with type', () => {\n      checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n    Given a doc string:\n      \\`\\`\\`json\n      {\n        \"foo\": \"bar\"\n      }\n      \\`\\`\\`\n`)\n    })\n\n    it('escapes DocString separators', () => {\n      checkGherkinToAstToMarkdownToAstToGherkin(`Feature: hello\n\n  Scenario: one\n    Given a doc string:\n      \\`\\`\\`\n      2\n      \\`\\`\n      3\n      \\\\\\`\\\\\\`\\\\\\`\n      4\n      \\\\\\`\\\\\\`\\\\\\`\\`\n      5\n      \\\\\\`\\\\\\`\\\\\\`\\`\\`\n      \\`\\`\\`\n`)\n    })\n  })\n\n  xit('renders comments', () => {\n    checkGherkinToAstToGherkin(`# one\nFeature: hello\n\n  Scenario: one\n    # two\n    Given a doc string:\n      \"\"\"\n      a\n      \\\\\"\\\\\"\\\\\"\n      b\n      \"\"\"\n`)\n  })\n\n  it('renders descriptions when set', () => {\n    checkGherkinToAstToGherkin(`Feature: hello\n  So this is a feature\n\n  Rule: machin\n    The first rule of the feature states things\n\n    Background: bbb\n      We can have some explications for the background\n\n      Given hello\n\n    Scenario: two\n      This scenario will do things, maybe\n\n      Given world\n`)\n  })\n\n  const featureFiles = fg.sync(`${__dirname}/../../../gherkin/testdata/good/*.feature`)\n  for (const featureFile of featureFiles) {\n    const relativePath = path.relative(__dirname, featureFile)\n    it(`renders ${relativePath}`, () => {\n      const gherkinSource = fs.readFileSync(featureFile, 'utf-8')\n      const gherkinDocument = parse(gherkinSource, new GherkinClassicTokenMatcher())\n      const formattedGherkinSource = pretty(gherkinDocument, 'gherkin')\n      const language = gherkinDocument.feature?.language || 'en'\n      const newGherkinDocument = checkGherkinToAstToGherkin(formattedGherkinSource, language)\n      assert(newGherkinDocument)\n      // TODO: comments\n      if (gherkinDocument.comments.length === 0) {\n        assert.deepStrictEqual(neutralize(newGherkinDocument), neutralize(gherkinDocument))\n      }\n    })\n  }\n\n  describe('escapeCell', () => {\n    it('escapes nothing', () => {\n      assert.strictEqual(escapeCell('hello'), 'hello')\n    })\n\n    it('escapes newline', () => {\n      assert.strictEqual(escapeCell('\\n'), '\\\\n')\n    })\n\n    it('escapes pipe', () => {\n      assert.strictEqual(escapeCell('|'), '\\\\|')\n    })\n\n    it('escapes backslash', () => {\n      assert.strictEqual(escapeCell('\\\\'), '\\\\\\\\')\n    })\n  })\n})\n\nfunction checkGherkinToAstToMarkdownToAstToGherkin(gherkinSource: string) {\n  const gherkinDocument = parse(gherkinSource, new GherkinClassicTokenMatcher())\n  // console.log({gherkinDocument})\n  const markdownSource = pretty(gherkinDocument, 'markdown')\n  // console.log(`<Markdown>${markdownSource}</Markdown>`)\n  const markdownGherkinDocument = parse(markdownSource, new GherkinInMarkdownTokenMatcher())\n  // console.log({markdownGherkinDocument})\n\n  const newGherkinSource = pretty(markdownGherkinDocument, 'gherkin')\n  // console.log(`<Gherkin>${newGherkinSource}</Gherkin>`)\n  assert.strictEqual(newGherkinSource, gherkinSource)\n}\n\nfunction checkGherkinToAstToGherkin(\n  gherkinSource: string,\n  language = 'en'\n): messages.GherkinDocument {\n  const gherkinDocument = parse(gherkinSource, new GherkinClassicTokenMatcher(language))\n  const newGherkinSource = pretty(gherkinDocument, 'gherkin')\n  // console.log(`<Gherkin>${newGherkinSource}</Gherkin>`)\n  assert.strictEqual(newGherkinSource, gherkinSource)\n  return gherkinDocument\n}\n\nfunction neutralize(gherkinDocument: messages.GherkinDocument): messages.GherkinDocument {\n  const json = JSON.stringify(\n    gherkinDocument,\n    (key, value) => {\n      if ('id' === key) {\n        return 'id'\n      } else if (['column', 'line'].includes(key)) {\n        return '0'\n      } else {\n        return value\n      }\n    },\n    2\n  )\n  return JSON.parse(json)\n}\n"]}