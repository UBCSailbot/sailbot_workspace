{"version":3,"file":"QueryTest.js","sourceRoot":"","sources":["../../test/QueryTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { GherkinStreams } from '@cucumber/gherkin-streams'\nimport * as messages from '@cucumber/messages'\nimport { pipeline, Readable, Writable } from 'stream'\nimport assert from 'assert'\nimport Query from '../src/Query'\nimport { promisify } from 'util'\n\nconst pipelinePromise = promisify(pipeline)\n\ndescribe('Query', () => {\n  let gherkinQuery: Query\n  let envelopes: messages.Envelope[]\n  beforeEach(() => {\n    envelopes = []\n    gherkinQuery = new Query()\n  })\n\n  describe('#getLocation(astNodeId)', () => {\n    it('looks up a scenario line number', async () => {\n      await parse(\n        `Feature: hello\n  Scenario: hi\n    Given a passed step\n`\n      )\n      const pickle = envelopes.find((e) => e.pickle).pickle\n      const gherkinScenarioId = pickle.astNodeIds[0]\n      const location = gherkinQuery.getLocation(gherkinScenarioId)\n      assert.deepStrictEqual(location.line, 2)\n    })\n\n    it('looks up a step line number', async () => {\n      await parse(\n        `Feature: hello\n  Scenario: hi\n    Given a passed step\n`\n      )\n      const pickleStep = envelopes.find((e) => e.pickle).pickle.steps[0]\n      const gherkinStepId = pickleStep.astNodeIds[0]\n      const location = gherkinQuery.getLocation(gherkinStepId)\n      assert.deepStrictEqual(location.line, 3)\n    })\n  })\n\n  describe('#getPickleIds(uri, astNodeId)', () => {\n    it('looks up pickle IDs for a scenario', async () => {\n      await parse(\n        `Feature: hello\n  Background:\n    Given a background step\n\n  Scenario: hi\n    Given a passed step\n`\n      )\n\n      const gherkinDocument = envelopes.find((envelope) => envelope.gherkinDocument).gherkinDocument\n      const scenario = gherkinDocument.feature.children.find((child) => child.scenario).scenario\n\n      const pickleId = envelopes.find((e) => e.pickle).pickle.id\n      const pickleIds = gherkinQuery.getPickleIds('test.feature', scenario.id)\n      assert.deepStrictEqual(pickleIds, [pickleId])\n    })\n\n    it('looks up pickle IDs for a whole document', async () => {\n      await parse(\n        `Feature: hello\n  Scenario:\n    Given a failed step\n\n  Scenario: hi\n    Given a passed step\n`\n      )\n      const expectedPickleIds = envelopes.filter((e) => e.pickle).map((e) => e.pickle.id)\n      const pickleIds = gherkinQuery.getPickleIds('test.feature')\n      assert.deepStrictEqual(pickleIds, expectedPickleIds)\n    })\n\n    it.skip('fails to look up pickle IDs for a step', async () => {\n      await parse(\n        `Feature: hello\n  Background:\n    Given a background step\n\n  Scenario: hi\n    Given a passed step\n`\n      )\n\n      assert.throws(() => gherkinQuery.getPickleIds('test.feature', 'some-non-existing-id'), {\n        message: 'No values found for key 6. Keys: [some-non-existing-id]',\n      })\n    })\n\n    it('avoids dupes and ignores empty scenarios', async () => {\n      await parse(\n        `Feature: Examples and empty scenario\n\n  Scenario: minimalistic\n    Given the <what>\n\n    Examples:\n      | what |\n      | foo  |\n\n    Examples:\n      | what |\n      | bar  |\n\n  Scenario: ha ok\n`\n      )\n\n      const pickleIds = gherkinQuery.getPickleIds('test.feature')\n      // One for each table, and one for the empty scenario\n      // https://github.com/cucumber/cucumber/issues/249\n      assert.strictEqual(pickleIds.length, 3, pickleIds.join(','))\n    })\n  })\n\n  describe('#getPickleStepIds(astNodeId', () => {\n    it('returns an empty list when the ID is unknown', async () => {\n      await parse('Feature: An empty feature')\n\n      assert.deepEqual(gherkinQuery.getPickleStepIds('whatever-id'), [])\n    })\n\n    it('returns the pickle step IDs corresponding the a scenario step', async () => {\n      await parse(\n        `Feature: hello\n  Scenario:\n    Given a failed step\n`\n      )\n\n      const pickleStepIds = envelopes\n        .find((envelope) => envelope.pickle)\n        .pickle.steps.map((pickleStep) => pickleStep.id)\n\n      const stepId = envelopes.find((envelope) => envelope.gherkinDocument).gherkinDocument.feature\n        .children[0].scenario.steps[0].id\n\n      assert.deepEqual(gherkinQuery.getPickleStepIds(stepId), pickleStepIds)\n    })\n\n    context('when a step has multiple pickle step', () => {\n      it('returns all pickleStepIds linked to a background step', async () => {\n        await parse(\n          `Feature: hello\n  Background:\n    Given a step that will have 2 pickle steps\n\n  Scenario:\n    Given a step that will only have 1 pickle step\n\n    Scenario:\n    Given a step that will only have 1 pickle step\n  `\n        )\n\n        const backgroundStepId = envelopes.find((envelope) => envelope.gherkinDocument)\n          .gherkinDocument.feature.children[0].background.steps[0].id\n\n        const pickleStepIds = envelopes\n          .filter((envelope) => envelope.pickle)\n          .map((envelope) => envelope.pickle.steps[0].id)\n\n        assert.deepEqual(gherkinQuery.getPickleStepIds(backgroundStepId), pickleStepIds)\n      })\n\n      it('return all pickleStepIds linked to a step in a scenario with examples', async () => {\n        await parse(\n          `Feature: hello\n  Scenario:\n    Given a passed step\n    And a <status> step\n\n    Examples:\n      | status |\n      | passed |\n      | failed |\n`\n        )\n\n        const scenarioStepId = envelopes.find((envelope) => envelope.gherkinDocument)\n          .gherkinDocument.feature.children[0].scenario.steps[1].id\n\n        const pickleStepIds = envelopes\n          .filter((envelope) => envelope.pickle)\n          .map((envelope) => envelope.pickle.steps[1].id)\n\n        assert.deepEqual(gherkinQuery.getPickleStepIds(scenarioStepId), pickleStepIds)\n      })\n    })\n  })\n\n  function parse(gherkinSource: string): Promise<void> {\n    const writable = new Writable({\n      objectMode: true,\n      write(\n        envelope: messages.Envelope,\n        encoding: string,\n        callback: (error?: Error | null) => void\n      ): void {\n        envelopes.push(envelope)\n        try {\n          gherkinQuery.update(envelope)\n          callback()\n        } catch (err) {\n          callback(err)\n        }\n      },\n    })\n    return pipelinePromise(gherkinMessages(gherkinSource, 'test.feature'), writable)\n  }\n\n  function gherkinMessages(gherkinSource: string, uri: string): Readable {\n    const source: messages.Envelope = {\n      source: {\n        uri,\n        data: gherkinSource,\n        mediaType: messages.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN,\n      },\n    }\n\n    const newId = messages.IdGenerator.incrementing()\n    return GherkinStreams.fromSources([source], { newId })\n  }\n})\n"]}