{"version":3,"file":"formatCommandTest.js","sourceRoot":"","sources":["../../../test/commands/formatCommandTest.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatCommand } from '../../src/commands/formatCommand'\nimport assert from 'assert'\nimport {\n  existsSync,\n  readFile as readFileCb,\n  writeFile as writeFileCb,\n  mkdir as mkdirCb,\n  mkdtemp as mkdtempCb,\n} from 'fs'\nimport os from 'os'\nimport { promisify } from 'util'\nimport { Readable, Writable } from 'stream'\n\nconst mkdtemp = promisify(mkdtempCb)\nconst mkdir = promisify(mkdirCb)\nconst writeFile = promisify(writeFileCb)\nconst readFile = promisify(readFileCb)\n\nclass BufStream extends Writable {\n  public buf = Buffer.alloc(0)\n  _write(chunk: Buffer, encoding: BufferEncoding, callback: (error?: Error | null) => void) {\n    this.buf = Buffer.concat([this.buf, chunk])\n    callback()\n  }\n}\n\ndescribe('formatCommand', () => {\n  let tmpdir: string\n  beforeEach(async () => {\n    tmpdir = await mkdtemp(os.tmpdir() + '/')\n  })\n\n  it('formats STDIN Gherkin to STDOUT Markdown', async () => {\n    const stdin = Readable.from(Buffer.from('Feature: Hello\\n'))\n    const stdout = new BufStream()\n    await formatCommand([], stdin, stdout, {fromSyntax: 'gherkin', toSyntax: 'markdown'})\n    assert.deepStrictEqual(stdout.buf.toString('utf-8'), '# Feature: Hello\\n')\n  })\n\n  it('formats STDIN Markdown to STDOUT Gherkin', async () => {\n    const stdin = Readable.from(Buffer.from('# Feature: Hello\\n'))\n    const stdout = new BufStream()\n    await formatCommand([], stdin, stdout, {fromSyntax: 'markdown', toSyntax: 'gherkin'})\n    assert.deepStrictEqual(stdout.buf.toString('utf-8'), 'Feature: Hello\\n')\n  })\n\n  it('formats Gherkin file in-place', async () => {\n    const path = `${tmpdir}/source.feature`\n    await writeFile(path, '   Feature: Hello\\n', 'utf-8')\n\n    await formatCommand([path], null, null, {})\n    const gherkin = await readFile(path, 'utf-8')\n    assert.deepStrictEqual(gherkin, 'Feature: Hello\\n')\n  })\n\n  it('formats Markdown file in-place', async () => {\n    const path = `${tmpdir}/source.feature.md`\n    await writeFile(path, '# Feature: Hello\\n', 'utf-8')\n\n    await formatCommand([path], null, null, {})\n    const markdown = await readFile(path, 'utf-8')\n    assert.deepStrictEqual(markdown, '# Feature: Hello\\n')\n  })\n\n  it('formats/moves Gherkin file to Markdown file', async () => {\n    const fromPath = `${tmpdir}/source.feature`\n    await writeFile(fromPath, 'Feature: Hello\\n', 'utf-8')\n\n    const toPath = `${tmpdir}/source.feature.md`\n\n    await formatCommand([fromPath], null, null, {toSyntax: 'markdown'})\n    const markdown = await readFile(toPath, 'utf-8')\n    assert.deepStrictEqual(markdown, '# Feature: Hello\\n')\n    assert(!existsSync(fromPath))\n  })\n\n  it('formats/moves Markdown file to Gherkin file', async () => {\n    const fromPath = `${tmpdir}/source.feature.md`\n    await writeFile(fromPath, '# Feature: Hello\\n', 'utf-8')\n\n    const toPath = `${tmpdir}/source.feature`\n\n    await formatCommand([fromPath], null, null, {toSyntax: 'gherkin'})\n    const markdown = await readFile(toPath, 'utf-8')\n    assert.deepStrictEqual(markdown, 'Feature: Hello\\n')\n    assert(!existsSync(fromPath))\n  })\n\n  it('throws an error when fromSyntax inconsitent with file extension', async () => {\n    const fromPath = `${tmpdir}/source.feature.md`\n    await assert.rejects(formatCommand([fromPath], null, null, {fromSyntax: 'gherkin'}))\n  })\n})\n"]}