{"version":3,"file":"pretty.js","sourceRoot":"","sources":["../../src/pretty.ts"],"names":[],"mappings":"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","sourcesContent":["import * as messages from '@cucumber/messages'\nimport { walkGherkinDocument } from './walkGherkinDocument'\n\nexport type Syntax = 'markdown' | 'gherkin'\n\nexport default function pretty(\n  gherkinDocument: messages.GherkinDocument,\n  syntax: Syntax = 'gherkin'\n): string {\n  let scenarioLevel = 1\n  return walkGherkinDocument<string>(gherkinDocument, '', {\n    feature(feature, content) {\n      return content\n        .concat(prettyLanguageHeader(feature.language))\n        .concat(prettyKeywordContainer(feature, syntax, 0))\n    },\n    rule(rule, content) {\n      scenarioLevel = 2\n      return content.concat(prettyKeywordContainer(rule, syntax, 1))\n    },\n    background(background, content) {\n      return content.concat(prettyKeywordContainer(background, syntax, scenarioLevel))\n    },\n    scenario(scenario, content) {\n      return content.concat(prettyKeywordContainer(scenario, syntax, scenarioLevel))\n    },\n    examples(examples, content) {\n      const tableRows = examples.tableHeader ? [examples.tableHeader, ...examples.tableBody] : []\n      return content\n        .concat(prettyKeywordContainer(examples, syntax, scenarioLevel + 1))\n        .concat(prettyTableRows(tableRows, syntax, scenarioLevel + 2))\n    },\n    step(step, content) {\n      return content\n        .concat(stepPrefix(scenarioLevel + 1, syntax))\n        .concat(step.keyword)\n        .concat(step.text)\n        .concat('\\n')\n    },\n    dataTable(dataTable, content) {\n      const level = syntax === 'markdown' ? 1 : scenarioLevel + 2\n      return content.concat(prettyTableRows(dataTable.rows || [], syntax, level))\n    },\n    docString(docString, content) {\n      const delimiter = makeDocStringDelimiter(syntax, docString)\n      const level = syntax === 'markdown' ? 1 : scenarioLevel + 2\n      const indent = spaces(level)\n      let docStringContent = docString.content.replace(/^/gm, indent)\n      if (syntax === 'gherkin') {\n        if (docString.delimiter === '\"\"\"') {\n          docStringContent = docStringContent.replace(/\"\"\"/gm, '\\\\\"\\\\\"\\\\\"')\n        } else {\n          docStringContent = docStringContent.replace(/```/gm, '\\\\`\\\\`\\\\`')\n        }\n      }\n      return content\n        .concat(indent)\n        .concat(delimiter)\n        .concat(docString.mediaType || '')\n        .concat('\\n')\n        .concat(docStringContent)\n        .concat('\\n')\n        .concat(indent)\n        .concat(delimiter)\n        .concat('\\n')\n    },\n  })\n}\n\nfunction prettyLanguageHeader(language: string | undefined): string {\n  return language === 'en' ? '' : `# language: ${language}\\n`\n}\n\nfunction prettyKeywordContainer(\n  stepContainer:\n    | messages.Feature\n    | messages.Scenario\n    | messages.Rule\n    | messages.Examples\n    | messages.Background,\n  syntax: Syntax,\n  level: number\n): string {\n  const tags: readonly messages.Tag[] = 'tags' in stepContainer ? stepContainer.tags : []\n  const stepCount = 'steps' in stepContainer ? stepContainer.steps.length : 0\n  const description = prettyDescription(stepContainer.description, syntax)\n\n  return ''\n    .concat(level === 0 ? '' : '\\n')\n    .concat(prettyTags(tags, syntax, level))\n    .concat(keywordPrefix(level, syntax))\n    .concat(stepContainer.keyword)\n    .concat(': ')\n    .concat(stepContainer.name)\n    .concat('\\n')\n    .concat(description)\n    .concat(description && stepCount > 0 ? '\\n' : '')\n}\n\nfunction prettyDescription(description: string, syntax: Syntax): string {\n  if (!description) return ''\n  if (syntax === 'gherkin') return description + '\\n'\n  else return description.replace(/^\\s*/gm, '') + '\\n'\n}\n\nfunction prettyTags(tags: readonly messages.Tag[], syntax: Syntax, level: number): string {\n  if (tags === undefined || tags.length == 0) {\n    return ''\n  }\n  const prefix = syntax === 'gherkin' ? spaces(level) : ''\n  const tagQuote = syntax === 'gherkin' ? '' : '`'\n  return prefix + tags.map((tag) => `${tagQuote}${tag.name}${tagQuote}`).join(' ') + '\\n'\n}\n\nfunction keywordPrefix(level: number, syntax: Syntax): string {\n  if (syntax === 'markdown') {\n    return new Array(level + 2).join('#') + ' '\n  } else {\n    return spaces(level)\n  }\n}\n\nfunction stepPrefix(level: number, syntax: Syntax): string {\n  if (syntax === 'markdown') {\n    return '* '\n  } else {\n    return new Array(level + 1).join('  ')\n  }\n}\n\nfunction spaces(level: number): string {\n  return new Array(level + 1).join('  ')\n}\n\nfunction makeDocStringDelimiter(syntax: Syntax, docString: messages.DocString) {\n  if (syntax === 'gherkin') {\n    return docString.delimiter.substring(0, 3)\n  }\n\n  // The length of the fenced code block delimiter is three backticks when the content inside doesn't have backticks.\n  // If the content inside has three or more backticks, the number of backticks in the delimiter must be at least one more\n  // https://github.github.com/gfm/#fenced-code-blocks\n  const threeOrMoreBackticks = /(```+)/g\n  let maxContentBackTickCount = 2\n  let match\n  do {\n    match = threeOrMoreBackticks.exec(docString.content)\n    if (match) {\n      maxContentBackTickCount = Math.max(maxContentBackTickCount, match[1].length)\n    }\n  } while (match)\n  // Return a delimiter with one more backtick than the max number of backticks in the contents (3 ny default)\n  return new Array(maxContentBackTickCount + 2).join('`')\n}\n\nfunction prettyTableRows(\n  tableRows: readonly messages.TableRow[],\n  syntax: Syntax,\n  level: number\n): string {\n  if (tableRows.length === 0) return ''\n  const maxWidths: number[] = new Array(tableRows[0].cells.length).fill(0)\n  tableRows.forEach((tableRow) => {\n    tableRow.cells.forEach((tableCell, j) => {\n      maxWidths[j] = Math.max(maxWidths[j], escapeCell(tableCell.value).length)\n    })\n  })\n\n  let n = 0\n  let s = ''\n  for (const row of tableRows) {\n    s += prettyTableRow(row, level, maxWidths, syntax)\n    if (n === 0 && syntax === 'markdown') {\n      const separatorRow: messages.TableRow = {\n        location: row.location,\n        id: row.id + '-separator',\n        cells: row.cells.map((cell, j) => ({\n          location: cell.location,\n          value: new Array(maxWidths[j] + 1).join('-'),\n        })),\n      }\n      s += prettyTableRow(separatorRow, level, maxWidths, syntax)\n    }\n    n++\n  }\n  return s\n}\n\nfunction prettyTableRow(\n  row: messages.TableRow,\n  level: number,\n  maxWidths: readonly number[],\n  syntax: Syntax\n): string {\n  const actualLevel = syntax === 'markdown' ? 1 : level\n  return `${spaces(actualLevel)}| ${row.cells\n    .map((cell, j) => {\n      const escapedCellValue = escapeCell(cell.value)\n      const spaceCount = maxWidths[j] - escapedCellValue.length\n      const spaces = new Array(spaceCount + 1).join(' ')\n      return isNumeric(escapedCellValue) ? spaces + escapedCellValue : escapedCellValue + spaces\n    })\n    .join(' | ')} |\\n`\n}\n\nexport function escapeCell(s: string) {\n  let e = ''\n  const characters = s.split('')\n  for (const c of characters) {\n    switch (c) {\n      case '\\\\':\n        e += '\\\\\\\\'\n        break\n      case '\\n':\n        e += '\\\\n'\n        break\n      case '|':\n        e += '\\\\|'\n        break\n      default:\n        e += c\n    }\n  }\n  return e\n}\n\nfunction isNumeric(s: string) {\n  return !isNaN(parseFloat(s))\n}\n"]}