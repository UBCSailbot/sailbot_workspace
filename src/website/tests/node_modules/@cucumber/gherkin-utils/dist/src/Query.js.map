{"version":3,"file":"Query.js","sourceRoot":"","sources":["../../src/Query.ts"],"names":[],"mappings":"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","sourcesContent":["import * as messages from '@cucumber/messages'\nimport { ArrayMultimap } from '@teppeis/multimaps'\n\nexport default class Query {\n  private readonly sources: messages.Source[] = []\n  private readonly sourceByUri = new Map<string, messages.Source>()\n  private readonly gherkinDocuments: messages.GherkinDocument[] = []\n  private readonly pickles: messages.Pickle[] = []\n  private readonly locationByAstNodeId = new Map<string, messages.Location>()\n  private readonly gherkinStepByAstNodeId = new Map<string, messages.Step>()\n  private readonly pickleIdsMapByUri = new Map<string, ArrayMultimap<string, string>>()\n  private readonly pickleIdsByAstNodeId = new Map<string, string[]>()\n  private readonly pickleStepIdsByAstNodeId = new Map<string, string[]>()\n  // AST nodes\n  private readonly featureByUriLine = new Map<string, messages.Feature>()\n  private readonly backgroundByUriLine = new Map<string, messages.Background>()\n  private readonly ruleByUriLine = new Map<string, messages.Rule>()\n  private readonly scenarioByUriLine = new Map<string, messages.Scenario>()\n  private readonly examplesByUriLine = new Map<string, messages.Examples>()\n  private readonly stepByUriLine = new Map<string, messages.Step>()\n\n  /**\n   * Gets the location (line and column) of an AST node.\n   * @param astNodeId\n   */\n  public getLocation(astNodeId: string): messages.Location {\n    return this.locationByAstNodeId.get(astNodeId)\n  }\n\n  public getSources(): readonly messages.Source[] {\n    return this.sources\n  }\n\n  public getGherkinDocuments(): readonly messages.GherkinDocument[] {\n    return this.gherkinDocuments\n  }\n\n  public getPickles(): readonly messages.Pickle[] {\n    return this.pickles\n  }\n\n  public getSource(uri: string): messages.Source | undefined {\n    return this.sourceByUri.get(uri)\n  }\n\n  public getFeature(uri: string, line: number): messages.Feature | undefined {\n    return getAstNode(this.featureByUriLine, uri, line)\n  }\n\n  public getBackground(uri: string, line: number): messages.Background | undefined {\n    return getAstNode(this.backgroundByUriLine, uri, line)\n  }\n\n  public getRule(uri: string, line: number): messages.Rule | undefined {\n    return getAstNode(this.ruleByUriLine, uri, line)\n  }\n\n  public getScenario(uri: string, line: number): messages.Scenario | undefined {\n    return getAstNode(this.scenarioByUriLine, uri, line)\n  }\n\n  public getExamples(uri: string, line: number): messages.Examples | undefined {\n    return getAstNode(this.examplesByUriLine, uri, line)\n  }\n\n  public getStep(uri: string, line: number): messages.Step | undefined {\n    return getAstNode(this.stepByUriLine, uri, line)\n  }\n\n  /**\n   * Gets all the pickle IDs\n   * @param uri - the URI of the document\n   * @param astNodeId - optionally restrict results to a particular AST node\n   */\n  public getPickleIds(uri: string, astNodeId?: string): readonly string[] {\n    const pickleIdsByAstNodeId = this.pickleIdsMapByUri.get(uri)\n    if (!pickleIdsByAstNodeId) {\n      throw new Error(`No pickleIds for uri=${uri}`)\n    }\n    return astNodeId === undefined\n      ? Array.from(new Set(pickleIdsByAstNodeId.values()))\n      : pickleIdsByAstNodeId.get(astNodeId)\n  }\n\n  public getPickleStepIds(astNodeId: string): readonly string[] {\n    return this.pickleStepIdsByAstNodeId.get(astNodeId) || []\n  }\n\n  public update(message: messages.Envelope): Query {\n    if (message.source) {\n      this.sources.push(message.source)\n      this.sourceByUri.set(message.source.uri, message.source)\n    }\n\n    if (message.gherkinDocument) {\n      this.gherkinDocuments.push(message.gherkinDocument)\n\n      if (message.gherkinDocument.feature) {\n        this.updateGherkinFeature(message.gherkinDocument.uri, message.gherkinDocument.feature)\n      }\n    }\n\n    if (message.pickle) {\n      const pickle = message.pickle\n      this.updatePickle(pickle)\n    }\n\n    return this\n  }\n\n  private updateGherkinFeature(uri: string, feature: messages.Feature) {\n    setAstNode(this.featureByUriLine, uri, feature)\n    this.pickleIdsMapByUri.set(uri, new ArrayMultimap<string, string>())\n\n    for (const featureChild of feature.children) {\n      if (featureChild.background) {\n        this.updateGherkinBackground(uri, featureChild.background)\n      }\n\n      if (featureChild.scenario) {\n        this.updateGherkinScenario(uri, featureChild.scenario)\n      }\n\n      if (featureChild.rule) {\n        this.updateGherkinRule(uri, featureChild.rule)\n      }\n    }\n  }\n\n  private updateGherkinBackground(uri: string, background: messages.Background) {\n    setAstNode(this.backgroundByUriLine, uri, background)\n    for (const step of background.steps) {\n      this.updateGherkinStep(uri, step)\n    }\n  }\n\n  private updateGherkinRule(uri: string, rule: messages.Rule) {\n    setAstNode(this.ruleByUriLine, uri, rule)\n    for (const ruleChild of rule.children) {\n      if (ruleChild.background) {\n        this.updateGherkinBackground(uri, ruleChild.background)\n      }\n\n      if (ruleChild.scenario) {\n        this.updateGherkinScenario(uri, ruleChild.scenario)\n      }\n    }\n  }\n\n  private updateGherkinScenario(uri: string, scenario: messages.Scenario) {\n    setAstNode(this.scenarioByUriLine, uri, scenario)\n    this.locationByAstNodeId.set(scenario.id, scenario.location)\n    for (const step of scenario.steps) {\n      this.updateGherkinStep(uri, step)\n    }\n\n    for (const examples of scenario.examples) {\n      this.updateGherkinExamples(uri, examples)\n    }\n  }\n\n  private updateGherkinExamples(uri: string, examples: messages.Examples) {\n    setAstNode(this.examplesByUriLine, uri, examples)\n    for (const tableRow of examples.tableBody || []) {\n      this.locationByAstNodeId.set(tableRow.id, tableRow.location)\n    }\n  }\n\n  private updateGherkinStep(uri: string, step: messages.Step) {\n    setAstNode(this.stepByUriLine, uri, step)\n    this.locationByAstNodeId.set(step.id, step.location)\n    this.gherkinStepByAstNodeId.set(step.id, step)\n  }\n\n  private updatePickle(pickle: messages.Pickle) {\n    const pickleIdsByLineNumber = this.pickleIdsMapByUri.get(pickle.uri)\n\n    for (const astNodeId of pickle.astNodeIds) {\n      pickleIdsByLineNumber.put(astNodeId, pickle.id)\n    }\n    this.updatePickleSteps(pickle)\n    this.pickles.push(pickle)\n\n    for (const astNodeId of pickle.astNodeIds) {\n      if (!this.pickleIdsByAstNodeId.has(astNodeId)) {\n        this.pickleIdsByAstNodeId.set(astNodeId, [])\n      }\n      this.pickleIdsByAstNodeId.get(astNodeId).push(pickle.id)\n    }\n  }\n\n  private updatePickleSteps(pickle: messages.Pickle) {\n    const pickleSteps = pickle.steps\n    for (const pickleStep of pickleSteps) {\n      for (const astNodeId of pickleStep.astNodeIds) {\n        if (!this.pickleStepIdsByAstNodeId.has(astNodeId)) {\n          this.pickleStepIdsByAstNodeId.set(astNodeId, [])\n        }\n        this.pickleStepIdsByAstNodeId.get(astNodeId).push(pickleStep.id)\n      }\n    }\n  }\n}\n\ntype HasLocation = {\n  location: messages.Location\n}\n\nfunction setAstNode<AstNode extends HasLocation>(\n  map: Map<string, AstNode>,\n  uri: string,\n  astNode: AstNode\n) {\n  const line = astNode.location.line\n  const uriLine = [uri, line].join(':')\n  map.set(uriLine, astNode)\n}\n\nfunction getAstNode<AstNode>(\n  map: Map<string, AstNode>,\n  uri: string,\n  line: number\n): AstNode | undefined {\n  const uriLine = [uri, line].join(':')\n  return map.get(uriLine)\n}\n"]}