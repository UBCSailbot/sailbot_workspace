import glob
import os

BASE = """
# FILE AUTOGENERATED BY gen_dtypes.py - DO NOT EDIT


import builtins
import custom_interfaces.msg
import std_msgs.msg
from rclpy.node import MsgType
from typing import Tuple, Union

"""

GET_DTYPE_BASE = """
def get_ros_dtype(dtype: str) -> Tuple[Union[builtins.type, MsgType], type[MsgType]]:
    \"\"\"Given the dtype as a str, return the Python type object and identifier

    Args:
        dtype (str): dtype str from

    Raises:
        TypeError: If an invalid dtype is given

    Returns:
        Union[builtins.type, MsgType]: Type object
        MsgType: Type identifier
    \"\"\"
    match dtype:
        # builtin types see "Type name" column in:
        # https://docs.ros.org/en/foxy/Concepts/About-ROS-Interfaces.html#field-types

        case "bool":
            return builtins.bool, std_msgs.msg.Bool

        case "byte":
            return builtins.bytes, std_msgs.msg.Byte

        case "char":
            return builtins.str, std_msgs.msg.String

        case "float32":
            return builtins.float, std_msgs.msg.Float32

        case "float64":
            return builtins.float, std_msgs.msg.Float64

        case "int8":
            return builtins.int, std_msgs.msg.Int8

        case "uint8":
            return builtins.int, std_msgs.msg.UInt8

        case "int16":
            return builtins.int, std_msgs.msg.Int16

        case "uint16":
            return builtins.int, std_msgs.msg.UInt16

        case "int32":
            return builtins.int, std_msgs.msg.Int32

        case "uint32":
            return builtins.int, std_msgs.msg.UInt32

        case "int64":
            return builtins.int, std_msgs.msg.Int64

        case "uint64":
            return builtins.int, std_msgs.msg.UInt64

        case "string":
            return builtins.str, std_msgs.msg.String

        case "wstring":
            return builtins.str, std_msgs.msg.String

        # custom_interfaces
"""

GET_DTYPE_CASE_TEMPLATE = """
        case "{type}":
            return custom_interfaces.msg.{type}(), custom_interfaces.msg.{type}
"""

END_GET_DTYPE_CASE = """
        case _:
            raise TypeError("INVALID TYPE: {}".format(dtype))
"""


ROS_PACKAGES_DIR = os.path.join(
    os.getenv("ROS_WORKSPACE", default="/workspaces/sailbot_workspace"), "src"
)
CUSTOM_INTERFACES_MSG_DIR = os.path.join(ROS_PACKAGES_DIR, "custom_interfaces/msg")
OUTPUT_FILE = os.path.join(ROS_PACKAGES_DIR, "integration_tests/integration_tests/ros_dtypes.py")


def detect_custom_intfs() -> list[str]:
    """Detect all messages defined in custom_interfaces

    Returns:
        list[str]: List of message names
    """
    files = glob.glob("{}/*.msg".format(CUSTOM_INTERFACES_MSG_DIR))
    intfs: list[str] = []
    for file in files:
        intf = file.split(".")[0]  # Get rid of file extension
        intf = intf.split("/")[-1]  # Get rid of full path
        intfs.append(intf)
    return intfs


def build_output() -> str:
    """Builds the output for the autogenerated code

    Returns:
        str: autogenerated code
    """
    output = BASE + GET_DTYPE_BASE
    for intf in detect_custom_intfs():
        scenario = GET_DTYPE_CASE_TEMPLATE.format(type=intf)
        output += scenario
    output += END_GET_DTYPE_CASE
    return output


def gen_ros_dtypes() -> None:
    """Generates ros_dtypes.py code"""
    content = build_output()
    with open(OUTPUT_FILE, "w") as outfile:
        outfile.write(content)


if __name__ == "__main__":
    gen_ros_dtypes()
