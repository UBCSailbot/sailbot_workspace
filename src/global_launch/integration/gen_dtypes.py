import glob
import os

BASE = """
# FILE AUTOGENERATED BY gen_dtypes.py - DO NOT EDIT


import builtins
from custom_interfaces.msg import *
from std_msgs.msg import String

def get_dtype(dtype: str):
    match dtype:
        # BUILT-IN-TYPES
        # SEE: https://docs.ros.org/en/foxy/Concepts/About-ROS-Interfaces.html#field-types

        case "bool":
            return builtins.bool

        case "byte":
            return builtins.bytes

        case "char":
            return builtins.str

        case "float32":
            return builtins.float

        case "float64":
            return builtins.float

        case "int8":
            return builtins.int

        case "uint8":
            return builtins.int

        case "int16":
            return builtins.int

        case "uint16":
            return builtins.int

        case "int32":
            return builtins.int

        case "uint32":
            return builtins.int

        case "int64":
            return builtins.int

        case "uint64":
            return builtins.int

        case "string":
            return builtins.str

        case "wstring":
            return builtins.str

        # TODO: ARRAYS >.<

        # std_msg types (Only String b/c idk which ones we actually use)

        case "String":
            return String()

        # custom_interfaces
"""

CASE_TEMPLATE = """
        case "{type}":
            return {type}()
"""

ROS_PACKAGES_DIR = os.path.join(
    os.getenv("ROS_WORKSPACE", default="/workspaces/sailbot_workspace"), "src"
)
CUSTOM_INTERFACES_MSG_DIR = os.path.join(ROS_PACKAGES_DIR, "custom_interfaces/msg")
OUTPUT_FILE = os.path.join(ROS_PACKAGES_DIR, "global_launch/integration/dtypes.py")


def detect_custom_intfs():
    files = glob.glob("{}/*.msg".format(CUSTOM_INTERFACES_MSG_DIR))
    intfs: list[str] = []
    for file in files:
        intf = file.split(".")[0]  # Get rid of file extension
        intf = intf.split("/")[-1]  # Get rid of full path
        intfs.append(intf)
    return intfs


def build_output():
    output = BASE
    for intf in detect_custom_intfs():
        scenario = CASE_TEMPLATE.format(type=intf)
        output += scenario
    return output


def gen_dtypes():
    content = build_output()
    with open(OUTPUT_FILE, "w") as outfile:
        outfile.write(content)


if __name__ == "__main__":
    gen_dtypes()
